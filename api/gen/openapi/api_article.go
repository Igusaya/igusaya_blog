/*
 * igusaya_blog
 *
 * 個人用内製Blog
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// ArticleApiController binds http requests to an api service and writes the service results to the http response
type ArticleApiController struct {
	service      ArticleApiServicer
	errorHandler ErrorHandler
}

// ArticleApiOption for how the controller is set up.
type ArticleApiOption func(*ArticleApiController)

// WithArticleApiErrorHandler inject ErrorHandler into controller
func WithArticleApiErrorHandler(h ErrorHandler) ArticleApiOption {
	return func(c *ArticleApiController) {
		c.errorHandler = h
	}
}

// NewArticleApiController creates a default api controller
func NewArticleApiController(s ArticleApiServicer, opts ...ArticleApiOption) Router {
	controller := &ArticleApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ArticleApiController
func (c *ArticleApiController) Routes() Routes {
	return Routes{
		{
			"PostArticle",
			strings.ToUpper("Post"),
			"/article",
			c.PostArticle,
		},
	}
}

// PostArticle - 記事投稿
func (c *ArticleApiController) PostArticle(w http.ResponseWriter, r *http.Request) {
	createRequestParam := CreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateRequestRequired(createRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostArticle(r.Context(), createRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
