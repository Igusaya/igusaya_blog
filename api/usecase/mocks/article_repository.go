// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Igusaya/igusaya_blog/api/usecase (interfaces: ArticleRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Igusaya/igusaya_blog/api/domain"
	mysql "github.com/Igusaya/igusaya_blog/api/repository/mysql"
	gomock "github.com/golang/mock/gomock"
)

// MockArticleRepository is a mock of ArticleRepository interface.
type MockArticleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockArticleRepositoryMockRecorder
}

// MockArticleRepositoryMockRecorder is the mock recorder for MockArticleRepository.
type MockArticleRepositoryMockRecorder struct {
	mock *MockArticleRepository
}

// NewMockArticleRepository creates a new mock instance.
func NewMockArticleRepository(ctrl *gomock.Controller) *MockArticleRepository {
	mock := &MockArticleRepository{ctrl: ctrl}
	mock.recorder = &MockArticleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleRepository) EXPECT() *MockArticleRepositoryMockRecorder {
	return m.recorder
}

// InsertArticle mocks base method.
func (m *MockArticleRepository) InsertArticle(arg0 context.Context, arg1 mysql.Execer, arg2 *domain.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertArticle", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertArticle indicates an expected call of InsertArticle.
func (mr *MockArticleRepositoryMockRecorder) InsertArticle(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertArticle", reflect.TypeOf((*MockArticleRepository)(nil).InsertArticle), arg0, arg1, arg2)
}
