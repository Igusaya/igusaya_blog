// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Igusaya/igusaya_blog/api/handler (interfaces: AdminUsecase)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Igusaya/igusaya_blog/api/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockAdminUsecase is a mock of AdminUsecase interface.
type MockAdminUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAdminUsecaseMockRecorder
}

// MockAdminUsecaseMockRecorder is the mock recorder for MockAdminUsecase.
type MockAdminUsecaseMockRecorder struct {
	mock *MockAdminUsecase
}

// NewMockAdminUsecase creates a new mock instance.
func NewMockAdminUsecase(ctrl *gomock.Controller) *MockAdminUsecase {
	mock := &MockAdminUsecase{ctrl: ctrl}
	mock.recorder = &MockAdminUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminUsecase) EXPECT() *MockAdminUsecaseMockRecorder {
	return m.recorder
}

// SubmitArticle mocks base method.
func (m *MockAdminUsecase) SubmitArticle(arg0 context.Context, arg1 *domain.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitArticle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitArticle indicates an expected call of SubmitArticle.
func (mr *MockAdminUsecaseMockRecorder) SubmitArticle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitArticle", reflect.TypeOf((*MockAdminUsecase)(nil).SubmitArticle), arg0, arg1)
}
